#pragma once
#include "BinaryTreeNode.h"

/// <summary>
/// ?????????, ?????????????? ???????? ??????.
/// </summary>
struct BinaryTree
{
    /// <summary>
    /// ????????? ?? ???????? ???? ??????.
    /// </summary>
    BinaryTreeNode* Root;

    /// <summary>
    /// ??????????? ?????????????? ?????? ??? nullptr
    /// </summary>
    BinaryTree() : Root(nullptr) {}
};


/// <summary>
/// ????????? ????? ???????? ? ???????? ??????.
/// </summary>
/// <param name="node">????????? ?? ???? ??????, ? ???????? ?????????? ?????.</param>
/// <param name="value">????????, ??????? ????????? ?????.</param>
/// <returns>????????? ?? ????, ?????????? ??????? ????????, ??? nullptr, ???? ??????? ?? ??????.</returns>
BinaryTreeNode* Find(BinaryTreeNode* node, const int value);

/// <summary>
/// ????????? ????? ???????????? ???????? ? ??????.
/// </summary>
/// <param name="node">????????? ?? ???? ??????, ? ???????? ?????????? ?????.</param>
/// <returns>????????? ?? ????, ?????????? ??????????? ????????, ??? nullptr, ???? ?????? ?????.</returns>
BinaryTreeNode* FindMinimal(BinaryTreeNode* node);

/// <summary>
/// ????????? ????? ????????????? ???????? ? ??????.
/// </summary>
/// <param name="node">????????? ?? ???? ??????, ? ???????? ?????????? ?????.</param>
/// <returns>????????? ?? ????, ?????????? ???????????? ????????, ??? nullptr, ???? ?????? ?????.</returns>
BinaryTreeNode* FindMaximal(BinaryTreeNode* node);

/// <summary>
/// ????????? ????? ???????? ? ???????? ??????.
/// </summary>
/// <param name="node">?????? ?? ????????? ????, ???? ??????????? ????????.</param>
/// <param name="value">????????, ??????? ????????? ????????.</param>
void Insert(BinaryTreeNode*& node, int value);

/// <summary>
/// ??????? ??????? ? ???????? ????????? ?? ????????? ??????.
/// </summary>
/// <param name="node">?????? ?? ????????? ????, ?? ???????? ????????? ????????.</param>
/// <param name="value">????????, ??????? ????????? ???????.</param>
void Remove(BinaryTreeNode*& node, const int value);

#pragma once
#include "TreapNode.h"
/// <summary>
/// пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ.
/// </summary>
struct Treap
{
	/// <summary>
	/// пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ.
	/// </summary>
	TreapNode* Root;
	Treap() : Root(nullptr) {}
};

/// <summary>
/// пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ.
/// </summary>
/// <param name="node">пїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ</param>
/// <param name="key">пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ.</param>
/// <returns></returns>
TreapNode* FindElement(TreapNode* node, int key);

/// <summary>
/// пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅ пїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
/// </summary>
/// <param name="node">пїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ.</param>
/// <param name="key">пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ.</param>
/// <param name="left">пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ</param>
/// <param name="right">пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ.</param>
void Split(TreapNode* node, int key, TreapNode*& left, TreapNode*& right);

/// <summary>
/// пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅ пїЅпїЅпїЅпїЅ
/// </summary>
/// <param name="left">пїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ</param>
/// <param name="right">пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ</param>
/// <returns></returns>
TreapNode* Merge(TreapNode* left, TreapNode* right);

/// <summary>
/// пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅ пїЅ пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
/// </summary>
/// <param name="node">пїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ</param>
/// <param name="key">пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ</param>
void AddNotOptimized(TreapNode*& node, int key);

/// <summary>
///  пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅ пїЅ пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
/// </summary>
/// <param name="node">пїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ</param>
/// <param name="key">пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ</param>
void AddOptimized(TreapNode*& node, int key);


/// <summary>
/// пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅ пїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ c пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ, пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
/// </summary>
/// <param name="node">пїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ</param>
/// <param name="key">пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ</param>
/// <param name="success">пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ</param>
void RemoveNotOptimized(TreapNode*& node, int key, bool& success);


/// <summary>
/// пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅ пїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ c пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ, пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ
/// </summary>
/// <param name="node">пїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅ</param>
/// <param name="key">пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ</param>
/// <param name="success">пїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ</param>
void RemoveOptimized(TreapNode*& node, int key, bool& success);


/// <summary>
/// пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅпїЅ.
/// </summary>
/// <param name="key"></param>
/// <returns></returns>
int GetValue(TreapNode* node, int key);
